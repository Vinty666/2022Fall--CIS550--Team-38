{"ast":null,"code":"// import React from 'react';\n// import { Form, FormInput, FormGroup, Button, Card, CardBody, CardTitle, Progress } from \"shards-react\";\n//\n// import {\n//     Table,\n//     Pagination,\n//     Select,\n//     Row,\n//     Col,\n//     Divider,\n//     Slider,\n//     Rate\n// } from 'antd'\n// import { RadarChart } from 'react-vis';\n// import { format } from 'd3-format';\n//\n//\n//\n//\n// import MenuBar from '../components/MenuBar';\n// import { getPlayerSearch, getPlayer } from '../fetcher'\n// const wideFormat = format('.3r');\n//\n// const playerColumns = [\n//     {\n//         title: 'Name',\n//         dataIndex: 'Name',\n//         key: 'Name',\n//         sorter: (a, b) => a.Name.localeCompare(b.Name),\n//         render: (text, row) => <a href={`/players?id=${row.PlayerId}`}>{text}</a>\n//     },\n//     {\n//         title: 'Nationality',\n//         dataIndex: 'Nationality',\n//         key: 'Nationality',\n//         sorter: (a, b) => a.Nationality.localeCompare(b.Nationality)\n//     },\n//     {\n//         title: 'Rating',\n//         dataIndex: 'Rating',\n//         key: 'Rating',\n//         sorter: (a, b) => a.Rating - b.Rating\n//\n//     }\n//     // TASK 19: copy over your answers for tasks 7 - 9 to add columns for potential, club, and value\n// ];\n//\n//\n// class PlayersPage extends React.Component {\n//     constructor(props) {\n//         super(props)\n//         this.state = {\n//             nameQuery: '',\n//             nationalityQuery: '',\n//             clubQuery: '',\n//             ratingHighQuery: 100,\n//             ratingLowQuery: 0,\n//             potHighQuery: 100,\n//             potLowQuery: 0,\n//             selectedPlayerId: window.location.search ? window.location.search.substring(1).split('=')[1] : 229594,\n//             selectedPlayerDetails: null,\n//             playersResults: []\n//\n//         }\n//\n//         this.updateSearchResults = this.updateSearchResults.bind(this)\n//         this.handleNameQueryChange = this.handleNameQueryChange.bind(this)\n//         this.handleNationalityQueryChange = this.handleNationalityQueryChange.bind(this)\n//         this.handleClubQueryChange = this.handleClubQueryChange.bind(this)\n//         this.handleRatingChange = this.handleRatingChange.bind(this)\n//         this.handlePotentialChange = this.handlePotentialChange.bind(this)\n//     }\n//\n//\n//\n//     handleNameQueryChange(event) {\n//         this.setState({ nameQuery: event.target.value })\n//     }\n//\n//     handleClubQueryChange(event) {\n//         // TASK 20: update state variables appropriately. See handleNameQueryChange(event) for reference\n//     }\n//\n//     handleNationalityQueryChange(event) {\n//         // TASK 21: update state variables appropriately. See handleNameQueryChange(event) for reference\n//     }\n//\n//     handleRatingChange(value) {\n//         this.setState({ ratingLowQuery: value[0] })\n//         this.setState({ ratingHighQuery: value[1] })\n//     }\n//\n//     handlePotentialChange(value) {\n//         // TASK 22: parse value and update state variables appropriately. See handleRatingChange(value) for reference\n//     }\n//\n//\n//\n//     updateSearchResults() {\n//\n//         //TASK 23: call getPlayerSearch and update playerResults in state. See componentDidMount() for a hint\n//\n//     }\n//\n//     componentDidMount() {\n//         getPlayerSearch(this.state.nameQuery, this.state.nationalityQuery, this.state.clubQuery, this.state.ratingHighQuery, this.state.ratingLowQuery, this.state.potHighQuery, this.state.potLowQuery, null, null).then(res => {\n//             this.setState({ playersResults: res.results })\n//         })\n//\n//         // TASK 25: call getPlayer with the appropriate parameter and set update the correct state variable.\n//         // See the usage of getMatch in the componentDidMount method of MatchesPage for a hint!\n//\n//     }\n//\n//     render() {\n//         return (\n//\n//             <div>\n//\n//                 <MenuBar />\n//                 <Form style={{ width: '80vw', margin: '0 auto', marginTop: '5vh' }}>\n//                     <Row>\n//                         <Col flex={2}><FormGroup style={{ width: '20vw', margin: '0 auto' }}>\n//                             <label>Name</label>\n//                             <FormInput placeholder=\"Name\" value={this.state.nameQuery} onChange={this.handleNameQueryChange} />\n//                         </FormGroup></Col>\n//                         <Col flex={2}><FormGroup style={{ width: '20vw', margin: '0 auto' }}>\n//                             <label>Nationality</label>\n//                             <FormInput placeholder=\"Nationality\" value={this.state.nationalityQuery} onChange={this.handleNationalityQueryChange} />\n//                         </FormGroup></Col>\n//                         {/* TASK 26: Create a column for Club, using the elements and style we followed in the above two columns. Use the onChange method (handleClubQueryChange)  */}\n//\n//                     </Row>\n//                     <br></br>\n//                     <Row>\n//                         <Col flex={2}><FormGroup style={{ width: '20vw', margin: '0 auto' }}>\n//                             <label>Rating</label>\n//                             <Slider range defaultValue={[50, 100]} onChange={this.handleRatingChange} />\n//\n//                         </FormGroup></Col>\n//                         {/* TASK 27: Create a column with a label and slider in a FormGroup item for filtering by Potential. See the column above for reference and use the onChange method (handlePotentialChange)  */}\n//                         <Col flex={2}><FormGroup style={{ width: '10vw' }}>\n//                             <Button style={{ marginTop: '4vh' }} onClick={this.updateSearchResults}>Search</Button>\n//                         </FormGroup></Col>\n//\n//                     </Row>\n//\n//\n//                 </Form>\n//                 <Divider />\n//                 {/* TASK 24: Copy in the players table from the Home page, but use the following style tag: style={{ width: '70vw', margin: '0 auto', marginTop: '2vh' }} - this should be one line of code! */}\n//\n//                 <Divider />\n//\n//                 {this.state.selectedPlayerDetails ? <div style={{ width: '70vw', margin: '0 auto', marginTop: '2vh' }}>\n//                     <Card>\n//\n//                         <CardBody>\n//                         <Row gutter='30' align='middle' justify='center'>\n//                             <Col flex={2} style={{ textAlign: 'left' }}>\n//                             <h3>{this.state.selectedPlayerDetails.Name}</h3>\n//\n//                             </Col>\n//\n//                             <Col flex={2} style={{ textAlign: 'right' }}>\n//                             <img src={this.state.selectedPlayerDetails.Photo} referrerpolicy=\"no-referrer\" alt={null} style={{height:'15vh'}}/>\n//\n//                             </Col>\n//                         </Row>\n//                             <Row gutter='30' align='middle' justify='left'>\n//                                 <Col>\n//                                 <h5>{this.state.selectedPlayerDetails.Club}</h5>\n//                                 </Col>\n//                                 <Col>\n//                                 <h5>{this.state.selectedPlayerDetails.JerseyNumber}</h5>\n//                                 </Col>\n//                                 <Col>\n//                                 <h5>{this.state.selectedPlayerDetails.BestPosition}</h5>\n//                                 </Col>\n//                             </Row>\n//                             <br>\n//                             </br>\n//                             <Row gutter='30' align='middle' justify='left'>\n//                                 <Col>\n//                                 Age: {this.state.selectedPlayerDetails.Age}\n//                                 </Col>\n//                                 {/* TASK 28: add two more columns here for Height and Weight, with the appropriate labels as above */}\n//                                 <Col flex={2} style={{ textAlign: 'right' }}>\n//                                 {this.state.selectedPlayerDetails.Nationality}\n//                                     <img src={this.state.selectedPlayerDetails.Flag} referrerpolicy=\"no-referrer\" alt={null} style={{height:'3vh', marginLeft: '1vw'}}/>\n//                                 </Col>\n//\n//                             </Row>\n//                             <Row gutter='30' align='middle' justify='left'>\n//                                 <Col>\n//                                 Value: {this.state.selectedPlayerDetails.Value}\n//                                 </Col>\n//                                 <Col>\n//                                 Release Clause: {this.state.selectedPlayerDetails.ReleaseClause}\n//                                 </Col>\n//                                 {/* TASK 29: Create 2 additional columns for the attributes 'Wage' and 'Contract Valid Until' (use spaces between the words when labelling!) */}\n//                             </Row>\n//                         </CardBody>\n//\n//                     </Card>\n//\n//                     <Card style={{marginTop: '2vh'}}>\n//                         <CardBody>\n//                             <Row gutter='30' align='middle' justify='center'>\n//                             <Col flex={2} style={{ textAlign: 'left' }}>\n//                             <h6>Skill</h6>\n//                             <Rate disabled defaultValue={this.state.selectedPlayerDetails.Skill} />\n//                             <h6>Reputation</h6>\n//                             {/* TASK 30: create a star rating component for 'InternationalReputation'. Make sure you use the 'disabled' option as above to ensure it is read-only*/}\n//                             <Divider/>\n//                             <h6>Best Rating</h6>\n//                                 <Progress style={{ width: '20vw'}} value={this.state.selectedPlayerDetails.BestOverallRating} >{this.state.selectedPlayerDetails.BestOverallRating}</Progress>\n//                                 {/* TASK 31: create the headings and progress bars for 'Potential' and 'Rating'. Use the same style as the one above for 'Best Rating'.*/}\n//                                 </Col >\n//                                 <Col  push={2} flex={2}>\n//                                 {/*TASK 32: In case the player is a GK, show a radar chart (replacing 'null' below) with the labels: Agility, Ball Control, Passing, Positioning, Stamina, Strength */}\n//\n//                                     {this.state.selectedPlayerDetails.BestPosition === 'GK'?null:<RadarChart\n//                                 data={[this.state.selectedPlayerDetails]}\n//                                 tickFormat={t => wideFormat(t)}\n//                                 startingAngle={0}\n//                                 domains={[\n//                                     { name: 'Agility', domain: [0, 100], getValue: d => d.NAdjustedAgility },\n//                                     { name: 'Ball Control', domain: [0, 100], getValue: d => d.NBallControl },\n//                                     { name: 'Passing', domain: [0, 100], getValue: d => d.NPassing },\n//                                     { name: 'Positioning', domain: [0, 100], getValue: d => d.NPositioning },\n//                                     { name: 'Stamina', domain: [0, 100], getValue: d => d.NStamina },\n//                                     { name: 'Strength', domain: [0, 100], getValue: d => d.NStrength }\n//                                 ]}\n//                                 width={450}\n//                                 height={400}\n//\n//                             />}\n//\n//                                 </Col>\n//                             </Row>\n//                         </CardBody>\n//                     </Card>\n//\n//                 </div> : null}\n//\n//             </div>\n//         )\n//     }\n// }\n//\n// export default PlayersPage\n//","map":{"version":3,"sources":["D:/CIS550/2022Fall--CIS550--Team-38/client/src/pages/PlayersPage.js"],"names":[],"mappingssourcesContent":["// import React from 'react';\r\n// import { Form, FormInput, FormGroup, Button, Card, CardBody, CardTitle, Progress } from \"shards-react\";\r\n//\r\n// import {\r\n//     Table,\r\n//     Pagination,\r\n//     Select,\r\n//     Row,\r\n//     Col,\r\n//     Divider,\r\n//     Slider,\r\n//     Rate\r\n// } from 'antd'\r\n// import { RadarChart } from 'react-vis';\r\n// import { format } from 'd3-format';\r\n//\r\n//\r\n//\r\n//\r\n// import MenuBar from '../components/MenuBar';\r\n// import { getPlayerSearch, getPlayer } from '../fetcher'\r\n// const wideFormat = format('.3r');\r\n//\r\n// const playerColumns = [\r\n//     {\r\n//         title: 'Name',\r\n//         dataIndex: 'Name',\r\n//         key: 'Name',\r\n//         sorter: (a, b) => a.Name.localeCompare(b.Name),\r\n//         render: (text, row) => <a href={`/players?id=${row.PlayerId}`}>{text}</a>\r\n//     },\r\n//     {\r\n//         title: 'Nationality',\r\n//         dataIndex: 'Nationality',\r\n//         key: 'Nationality',\r\n//         sorter: (a, b) => a.Nationality.localeCompare(b.Nationality)\r\n//     },\r\n//     {\r\n//         title: 'Rating',\r\n//         dataIndex: 'Rating',\r\n//         key: 'Rating',\r\n//         sorter: (a, b) => a.Rating - b.Rating\r\n//\r\n//     }\r\n//     // TASK 19: copy over your answers for tasks 7 - 9 to add columns for potential, club, and value\r\n// ];\r\n//\r\n//\r\n// class PlayersPage extends React.Component {\r\n//     constructor(props) {\r\n//         super(props)\r\n//         this.state = {\r\n//             nameQuery: '',\r\n//             nationalityQuery: '',\r\n//             clubQuery: '',\r\n//             ratingHighQuery: 100,\r\n//             ratingLowQuery: 0,\r\n//             potHighQuery: 100,\r\n//             potLowQuery: 0,\r\n//             selectedPlayerId: window.location.search ? window.location.search.substring(1).split('=')[1] : 229594,\r\n//             selectedPlayerDetails: null,\r\n//             playersResults: []\r\n//\r\n//         }\r\n//\r\n//         this.updateSearchResults = this.updateSearchResults.bind(this)\r\n//         this.handleNameQueryChange = this.handleNameQueryChange.bind(this)\r\n//         this.handleNationalityQueryChange = this.handleNationalityQueryChange.bind(this)\r\n//         this.handleClubQueryChange = this.handleClubQueryChange.bind(this)\r\n//         this.handleRatingChange = this.handleRatingChange.bind(this)\r\n//         this.handlePotentialChange = this.handlePotentialChange.bind(this)\r\n//     }\r\n//\r\n//\r\n//\r\n//     handleNameQueryChange(event) {\r\n//         this.setState({ nameQuery: event.target.value })\r\n//     }\r\n//\r\n//     handleClubQueryChange(event) {\r\n//         // TASK 20: update state variables appropriately. See handleNameQueryChange(event) for reference\r\n//     }\r\n//\r\n//     handleNationalityQueryChange(event) {\r\n//         // TASK 21: update state variables appropriately. See handleNameQueryChange(event) for reference\r\n//     }\r\n//\r\n//     handleRatingChange(value) {\r\n//         this.setState({ ratingLowQuery: value[0] })\r\n//         this.setState({ ratingHighQuery: value[1] })\r\n//     }\r\n//\r\n//     handlePotentialChange(value) {\r\n//         // TASK 22: parse value and update state variables appropriately. See handleRatingChange(value) for reference\r\n//     }\r\n//\r\n//\r\n//\r\n//     updateSearchResults() {\r\n//\r\n//         //TASK 23: call getPlayerSearch and update playerResults in state. See componentDidMount() for a hint\r\n//\r\n//     }\r\n//\r\n//     componentDidMount() {\r\n//         getPlayerSearch(this.state.nameQuery, this.state.nationalityQuery, this.state.clubQuery, this.state.ratingHighQuery, this.state.ratingLowQuery, this.state.potHighQuery, this.state.potLowQuery, null, null).then(res => {\r\n//             this.setState({ playersResults: res.results })\r\n//         })\r\n//\r\n//         // TASK 25: call getPlayer with the appropriate parameter and set update the correct state variable.\r\n//         // See the usage of getMatch in the componentDidMount method of MatchesPage for a hint!\r\n//\r\n//     }\r\n//\r\n//     render() {\r\n//         return (\r\n//\r\n//             <div>\r\n//\r\n//                 <MenuBar />\r\n//                 <Form style={{ width: '80vw', margin: '0 auto', marginTop: '5vh' }}>\r\n//                     <Row>\r\n//                         <Col flex={2}><FormGroup style={{ width: '20vw', margin: '0 auto' }}>\r\n//                             <label>Name</label>\r\n//                             <FormInput placeholder=\"Name\" value={this.state.nameQuery} onChange={this.handleNameQueryChange} />\r\n//                         </FormGroup></Col>\r\n//                         <Col flex={2}><FormGroup style={{ width: '20vw', margin: '0 auto' }}>\r\n//                             <label>Nationality</label>\r\n//                             <FormInput placeholder=\"Nationality\" value={this.state.nationalityQuery} onChange={this.handleNationalityQueryChange} />\r\n//                         </FormGroup></Col>\r\n//                         {/* TASK 26: Create a column for Club, using the elements and style we followed in the above two columns. Use the onChange method (handleClubQueryChange)  */}\r\n//\r\n//                     </Row>\r\n//                     <br></br>\r\n//                     <Row>\r\n//                         <Col flex={2}><FormGroup style={{ width: '20vw', margin: '0 auto' }}>\r\n//                             <label>Rating</label>\r\n//                             <Slider range defaultValue={[50, 100]} onChange={this.handleRatingChange} />\r\n//\r\n//                         </FormGroup></Col>\r\n//                         {/* TASK 27: Create a column with a label and slider in a FormGroup item for filtering by Potential. See the column above for reference and use the onChange method (handlePotentialChange)  */}\r\n//                         <Col flex={2}><FormGroup style={{ width: '10vw' }}>\r\n//                             <Button style={{ marginTop: '4vh' }} onClick={this.updateSearchResults}>Search</Button>\r\n//                         </FormGroup></Col>\r\n//\r\n//                     </Row>\r\n//\r\n//\r\n//                 </Form>\r\n//                 <Divider />\r\n//                 {/* TASK 24: Copy in the players table from the Home page, but use the following style tag: style={{ width: '70vw', margin: '0 auto', marginTop: '2vh' }} - this should be one line of code! */}\r\n//\r\n//                 <Divider />\r\n//\r\n//                 {this.state.selectedPlayerDetails ? <div style={{ width: '70vw', margin: '0 auto', marginTop: '2vh' }}>\r\n//                     <Card>\r\n//\r\n//                         <CardBody>\r\n//                         <Row gutter='30' align='middle' justify='center'>\r\n//                             <Col flex={2} style={{ textAlign: 'left' }}>\r\n//                             <h3>{this.state.selectedPlayerDetails.Name}</h3>\r\n//\r\n//                             </Col>\r\n//\r\n//                             <Col flex={2} style={{ textAlign: 'right' }}>\r\n//                             <img src={this.state.selectedPlayerDetails.Photo} referrerpolicy=\"no-referrer\" alt={null} style={{height:'15vh'}}/>\r\n//\r\n//                             </Col>\r\n//                         </Row>\r\n//                             <Row gutter='30' align='middle' justify='left'>\r\n//                                 <Col>\r\n//                                 <h5>{this.state.selectedPlayerDetails.Club}</h5>\r\n//                                 </Col>\r\n//                                 <Col>\r\n//                                 <h5>{this.state.selectedPlayerDetails.JerseyNumber}</h5>\r\n//                                 </Col>\r\n//                                 <Col>\r\n//                                 <h5>{this.state.selectedPlayerDetails.BestPosition}</h5>\r\n//                                 </Col>\r\n//                             </Row>\r\n//                             <br>\r\n//                             </br>\r\n//                             <Row gutter='30' align='middle' justify='left'>\r\n//                                 <Col>\r\n//                                 Age: {this.state.selectedPlayerDetails.Age}\r\n//                                 </Col>\r\n//                                 {/* TASK 28: add two more columns here for Height and Weight, with the appropriate labels as above */}\r\n//                                 <Col flex={2} style={{ textAlign: 'right' }}>\r\n//                                 {this.state.selectedPlayerDetails.Nationality}\r\n//                                     <img src={this.state.selectedPlayerDetails.Flag} referrerpolicy=\"no-referrer\" alt={null} style={{height:'3vh', marginLeft: '1vw'}}/>\r\n//                                 </Col>\r\n//\r\n//                             </Row>\r\n//                             <Row gutter='30' align='middle' justify='left'>\r\n//                                 <Col>\r\n//                                 Value: {this.state.selectedPlayerDetails.Value}\r\n//                                 </Col>\r\n//                                 <Col>\r\n//                                 Release Clause: {this.state.selectedPlayerDetails.ReleaseClause}\r\n//                                 </Col>\r\n//                                 {/* TASK 29: Create 2 additional columns for the attributes 'Wage' and 'Contract Valid Until' (use spaces between the words when labelling!) */}\r\n//                             </Row>\r\n//                         </CardBody>\r\n//\r\n//                     </Card>\r\n//\r\n//                     <Card style={{marginTop: '2vh'}}>\r\n//                         <CardBody>\r\n//                             <Row gutter='30' align='middle' justify='center'>\r\n//                             <Col flex={2} style={{ textAlign: 'left' }}>\r\n//                             <h6>Skill</h6>\r\n//                             <Rate disabled defaultValue={this.state.selectedPlayerDetails.Skill} />\r\n//                             <h6>Reputation</h6>\r\n//                             {/* TASK 30: create a star rating component for 'InternationalReputation'. Make sure you use the 'disabled' option as above to ensure it is read-only*/}\r\n//                             <Divider/>\r\n//                             <h6>Best Rating</h6>\r\n//                                 <Progress style={{ width: '20vw'}} value={this.state.selectedPlayerDetails.BestOverallRating} >{this.state.selectedPlayerDetails.BestOverallRating}</Progress>\r\n//                                 {/* TASK 31: create the headings and progress bars for 'Potential' and 'Rating'. Use the same style as the one above for 'Best Rating'.*/}\r\n//                                 </Col >\r\n//                                 <Col  push={2} flex={2}>\r\n//                                 {/*TASK 32: In case the player is a GK, show a radar chart (replacing 'null' below) with the labels: Agility, Ball Control, Passing, Positioning, Stamina, Strength */}\r\n//\r\n//                                     {this.state.selectedPlayerDetails.BestPosition === 'GK'?null:<RadarChart\r\n//                                 data={[this.state.selectedPlayerDetails]}\r\n//                                 tickFormat={t => wideFormat(t)}\r\n//                                 startingAngle={0}\r\n//                                 domains={[\r\n//                                     { name: 'Agility', domain: [0, 100], getValue: d => d.NAdjustedAgility },\r\n//                                     { name: 'Ball Control', domain: [0, 100], getValue: d => d.NBallControl },\r\n//                                     { name: 'Passing', domain: [0, 100], getValue: d => d.NPassing },\r\n//                                     { name: 'Positioning', domain: [0, 100], getValue: d => d.NPositioning },\r\n//                                     { name: 'Stamina', domain: [0, 100], getValue: d => d.NStamina },\r\n//                                     { name: 'Strength', domain: [0, 100], getValue: d => d.NStrength }\r\n//                                 ]}\r\n//                                 width={450}\r\n//                                 height={400}\r\n//\r\n//                             />}\r\n//\r\n//                                 </Col>\r\n//                             </Row>\r\n//                         </CardBody>\r\n//                     </Card>\r\n//\r\n//                 </div> : null}\r\n//\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n//\r\n// export default PlayersPage\r\n//\r\n"]},"metadata":{},"sourceType":"module"}