{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"@babel/runtime/helpers/esm/createSuper\";\nimport * as React from 'react';\nimport findDOMNode from \"rc-util/es/Dom/findDOMNode\";\nimport toArray from \"rc-util/es/Children/toArray\";\nimport warning from \"rc-util/es/warning\";\nimport { composeRef, supportRef } from \"rc-util/es/ref\";\nimport ResizeObserver from 'resize-observer-polyfill';\nvar INTERNAL_PREFIX_KEY = 'rc-observer-key'; // Still need to be compatible with React 15, we use class component here\n\nvar ReactResizeObserver = /*#__PURE__*/function (_React$Component) {\n  _inherits(ReactResizeObserver, _React$Component);\n\n  var _super = _createSuper(ReactResizeObserver);\n\n  function ReactResizeObserver() {\n    var _this;\n\n    _classCallCheck(this, ReactResizeObserver);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.resizeObserver = null;\n    _this.childNode = null;\n    _this.currentElement = null;\n    _this.state = {\n      width: 0,\n      height: 0,\n      offsetHeight: 0,\n      offsetWidth: 0\n    };\n\n    _this.onResize = function (entries) {\n      var onResize = _this.props.onResize;\n      var target = entries[0].target;\n\n      var _target$getBoundingCl = target.getBoundingClientRect(),\n          width = _target$getBoundingCl.width,\n          height = _target$getBoundingCl.height;\n\n      var offsetWidth = target.offsetWidth,\n          offsetHeight = target.offsetHeight;\n      /**\n       * Resize observer trigger when content size changed.\n       * In most case we just care about element size,\n       * let's use `boundary` instead of `contentRect` here to avoid shaking.\n       */\n\n      var fixedWidth = Math.floor(width);\n      var fixedHeight = Math.floor(height);\n\n      if (_this.state.width !== fixedWidth || _this.state.height !== fixedHeight || _this.state.offsetWidth !== offsetWidth || _this.state.offsetHeight !== offsetHeight) {\n        var size = {\n          width: fixedWidth,\n          height: fixedHeight,\n          offsetWidth: offsetWidth,\n          offsetHeight: offsetHeight\n        };\n\n        _this.setState(size);\n\n        if (onResize) {\n          var mergedOffsetWidth = offsetWidth === Math.round(width) ? width : offsetWidth;\n          var mergedOffsetHeight = offsetHeight === Math.round(height) ? height : offsetHeight; // defer the callback but not defer to next frame\n\n          Promise.resolve().then(function () {\n            onResize(_objectSpread(_objectSpread({}, size), {}, {\n              offsetWidth: mergedOffsetWidth,\n              offsetHeight: mergedOffsetHeight\n            }), target);\n          });\n        }\n      }\n    };\n\n    _this.setChildNode = function (node) {\n      _this.childNode = node;\n    };\n\n    return _this;\n  }\n\n  _createClass(ReactResizeObserver, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.onComponentUpdated();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.onComponentUpdated();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.destroyObserver();\n    }\n  }, {\n    key: \"onComponentUpdated\",\n    value: function onComponentUpdated() {\n      var disabled = this.props.disabled; // Unregister if disabled\n\n      if (disabled) {\n        this.destroyObserver();\n        return;\n      } // Unregister if element changed\n\n\n      var element = findDOMNode(this.childNode || this);\n      var elementChanged = element !== this.currentElement;\n\n      if (elementChanged) {\n        this.destroyObserver();\n        this.currentElement = element;\n      }\n\n      if (!this.resizeObserver && element) {\n        this.resizeObserver = new ResizeObserver(this.onResize);\n        this.resizeObserver.observe(element);\n      }\n    }\n  }, {\n    key: \"destroyObserver\",\n    value: function destroyObserver() {\n      if (this.resizeObserver) {\n        this.resizeObserver.disconnect();\n        this.resizeObserver = null;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var children = this.props.children;\n      var childNodes = toArray(children);\n\n      if (childNodes.length > 1) {\n        warning(false, 'Find more than one child node with `children` in ResizeObserver. Will only observe first one.');\n      } else if (childNodes.length === 0) {\n        warning(false, '`children` of ResizeObserver is empty. Nothing is in observe.');\n        return null;\n      }\n\n      var childNode = childNodes[0];\n\n      if ( /*#__PURE__*/React.isValidElement(childNode) && supportRef(childNode)) {\n        var ref = childNode.ref;\n        childNodes[0] = /*#__PURE__*/React.cloneElement(childNode, {\n          ref: composeRef(ref, this.setChildNode)\n        });\n      }\n\n      return childNodes.length === 1 ? childNodes[0] : childNodes.map(function (node, index) {\n        if (! /*#__PURE__*/React.isValidElement(node) || 'key' in node && node.key !== null) {\n          return node;\n        }\n\n        return /*#__PURE__*/React.cloneElement(node, {\n          key: \"\".concat(INTERNAL_PREFIX_KEY, \"-\").concat(index)\n        });\n      });\n    }\n  }]);\n\n  return ReactResizeObserver;\n}(React.Component);\n\nReactResizeObserver.displayName = 'ResizeObserver';\nexport default ReactResizeObserver;","map":{"version":3,"sources":["D:/CIS550/2022Fall--CIS550--Team-38/client/node_modules/rc-resize-observer/es/index.js"],"names":["_objectSpread","_classCallCheck","_createClass","_inherits","_createSuper","React","findDOMNode","toArray","warning","composeRef","supportRef","ResizeObserver","INTERNAL_PREFIX_KEY","ReactResizeObserver","_React$Component","_super","_this","_len","arguments","length","args","Array","_key","call","apply","concat","resizeObserver","childNode","currentElement","state","width","height","offsetHeight","offsetWidth","onResize","entries","props","target","_target$getBoundingCl","getBoundingClientRect","fixedWidth","Math","floor","fixedHeight","size","setState","mergedOffsetWidth","round","mergedOffsetHeight","Promise","resolve","then","setChildNode","node","key","value","componentDidMount","onComponentUpdated","componentDidUpdate","componentWillUnmount","destroyObserver","disabled","element","elementChanged","observe","disconnect","render","children","childNodes","isValidElement","ref","cloneElement","map","index","Component","displayName"],"mappings":"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","sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"@babel/runtime/helpers/esm/createSuper\";\nimport * as React from 'react';\nimport findDOMNode from \"rc-util/es/Dom/findDOMNode\";\nimport toArray from \"rc-util/es/Children/toArray\";\nimport warning from \"rc-util/es/warning\";\nimport { composeRef, supportRef } from \"rc-util/es/ref\";\nimport ResizeObserver from 'resize-observer-polyfill';\nvar INTERNAL_PREFIX_KEY = 'rc-observer-key'; // Still need to be compatible with React 15, we use class component here\n\nvar ReactResizeObserver = /*#__PURE__*/function (_React$Component) {\n  _inherits(ReactResizeObserver, _React$Component);\n\n  var _super = _createSuper(ReactResizeObserver);\n\n  function ReactResizeObserver() {\n    var _this;\n\n    _classCallCheck(this, ReactResizeObserver);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.resizeObserver = null;\n    _this.childNode = null;\n    _this.currentElement = null;\n    _this.state = {\n      width: 0,\n      height: 0,\n      offsetHeight: 0,\n      offsetWidth: 0\n    };\n\n    _this.onResize = function (entries) {\n      var onResize = _this.props.onResize;\n      var target = entries[0].target;\n\n      var _target$getBoundingCl = target.getBoundingClientRect(),\n          width = _target$getBoundingCl.width,\n          height = _target$getBoundingCl.height;\n\n      var offsetWidth = target.offsetWidth,\n          offsetHeight = target.offsetHeight;\n      /**\n       * Resize observer trigger when content size changed.\n       * In most case we just care about element size,\n       * let's use `boundary` instead of `contentRect` here to avoid shaking.\n       */\n\n      var fixedWidth = Math.floor(width);\n      var fixedHeight = Math.floor(height);\n\n      if (_this.state.width !== fixedWidth || _this.state.height !== fixedHeight || _this.state.offsetWidth !== offsetWidth || _this.state.offsetHeight !== offsetHeight) {\n        var size = {\n          width: fixedWidth,\n          height: fixedHeight,\n          offsetWidth: offsetWidth,\n          offsetHeight: offsetHeight\n        };\n\n        _this.setState(size);\n\n        if (onResize) {\n          var mergedOffsetWidth = offsetWidth === Math.round(width) ? width : offsetWidth;\n          var mergedOffsetHeight = offsetHeight === Math.round(height) ? height : offsetHeight; // defer the callback but not defer to next frame\n\n          Promise.resolve().then(function () {\n            onResize(_objectSpread(_objectSpread({}, size), {}, {\n              offsetWidth: mergedOffsetWidth,\n              offsetHeight: mergedOffsetHeight\n            }), target);\n          });\n        }\n      }\n    };\n\n    _this.setChildNode = function (node) {\n      _this.childNode = node;\n    };\n\n    return _this;\n  }\n\n  _createClass(ReactResizeObserver, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.onComponentUpdated();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.onComponentUpdated();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.destroyObserver();\n    }\n  }, {\n    key: \"onComponentUpdated\",\n    value: function onComponentUpdated() {\n      var disabled = this.props.disabled; // Unregister if disabled\n\n      if (disabled) {\n        this.destroyObserver();\n        return;\n      } // Unregister if element changed\n\n\n      var element = findDOMNode(this.childNode || this);\n      var elementChanged = element !== this.currentElement;\n\n      if (elementChanged) {\n        this.destroyObserver();\n        this.currentElement = element;\n      }\n\n      if (!this.resizeObserver && element) {\n        this.resizeObserver = new ResizeObserver(this.onResize);\n        this.resizeObserver.observe(element);\n      }\n    }\n  }, {\n    key: \"destroyObserver\",\n    value: function destroyObserver() {\n      if (this.resizeObserver) {\n        this.resizeObserver.disconnect();\n        this.resizeObserver = null;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var children = this.props.children;\n      var childNodes = toArray(children);\n\n      if (childNodes.length > 1) {\n        warning(false, 'Find more than one child node with `children` in ResizeObserver. Will only observe first one.');\n      } else if (childNodes.length === 0) {\n        warning(false, '`children` of ResizeObserver is empty. Nothing is in observe.');\n        return null;\n      }\n\n      var childNode = childNodes[0];\n\n      if ( /*#__PURE__*/React.isValidElement(childNode) && supportRef(childNode)) {\n        var ref = childNode.ref;\n        childNodes[0] = /*#__PURE__*/React.cloneElement(childNode, {\n          ref: composeRef(ref, this.setChildNode)\n        });\n      }\n\n      return childNodes.length === 1 ? childNodes[0] : childNodes.map(function (node, index) {\n        if (! /*#__PURE__*/React.isValidElement(node) || 'key' in node && node.key !== null) {\n          return node;\n        }\n\n        return /*#__PURE__*/React.cloneElement(node, {\n          key: \"\".concat(INTERNAL_PREFIX_KEY, \"-\").concat(index)\n        });\n      });\n    }\n  }]);\n\n  return ReactResizeObserver;\n}(React.Component);\n\nReactResizeObserver.displayName = 'ResizeObserver';\nexport default ReactResizeObserver;"]},"metadata":{},"sourceType":"module"}