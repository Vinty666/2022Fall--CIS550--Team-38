{"ast":null,"code":"var _jsxFileName = \"D:\\\\CIS550\\\\2022Fall--CIS550--Team-38\\\\client\\\\src\\\\pages\\\\HomePage.js\";\nimport React from 'react';\nimport { Table, Pagination, Select } from 'antd';\nimport MenuBar from '../components/MenuBar';\nimport { searchArtist, searchTopSongs } from '../fetcher';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Column,\n  ColumnGroup\n} = Table;\nconst {\n  Option\n} = Select;\nconst playerColumns = [{\n  title: 'Name',\n  dataIndex: 'Name',\n  key: 'Name',\n  sorter: (a, b) => a.Name.localeCompare(b.Name),\n  render: (text, row) => /*#__PURE__*/_jsxDEV(\"a\", {\n    href: `/players?id=${row.PlayerId}`,\n    children: text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 28\n  }, this)\n}, {\n  title: 'Nationality',\n  dataIndex: 'Nationality',\n  key: 'Nationality',\n  sorter: (a, b) => a.Nationality.localeCompare(b.Nationality)\n}, {\n  title: 'Rating',\n  dataIndex: 'Rating',\n  key: 'Rating',\n  sorter: (a, b) => a.Rating - b.Rating\n} // TASK 7: add a column for Potential, with the ability to (numerically) sort ,\n// TASK 8: add a column for Club, with the ability to (alphabetically) sort \n// TASK 9: add a column for Value - no sorting required\n];\n\nclass HomePage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      matchesResults: [],\n      matchesPageNumber: 1,\n      matchesPageSize: 10,\n      playersResults: [],\n      pagination: null\n    };\n    this.leagueOnChange = this.leagueOnChange.bind(this);\n    this.goToMatch = this.goToMatch.bind(this);\n  }\n\n  goToMatch(matchId) {\n    window.location = `/matches?id=${matchId}`;\n  }\n\n  leagueOnChange(value) {// TASK 2: this value should be used as a parameter to call getAllMatches in fetcher.js with the parameters page and pageSize set to null\n    // then, matchesResults in state should be set to the results returned - see a similar function call in componentDidMount()\n  }\n\n  componentDidMount() {\n    searchArtist(null, null, null, null).then(res => {\n      this.setState({\n        matchesResults: res.results\n      });\n    });\n    searchTopSongs(\"pop\").then(res => {\n      console.log(res.results); // TASK 1: set the correct state attribute to res.results\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(MenuBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '70vw',\n          margin: '0 auto',\n          marginTop: '5vh'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Artist\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Table, {\n          dataSource: this.state.playersResults,\n          columns: playerColumns,\n          pagination: {\n            pageSizeOptions: [5, 10],\n            defaultPageSize: 5,\n            showQuickJumper: true\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '70vw',\n          margin: '0 auto',\n          marginTop: '2vh'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Awarded\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          defaultValue: \"D1\",\n          style: {\n            width: 120\n          },\n          onChange: this.leagueOnChange,\n          children: /*#__PURE__*/_jsxDEV(Option, {\n            value: \"D1\",\n            children: \"Bundesliga\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Table, {\n          onRow: (record, rowIndex) => {\n            return {\n              onClick: event => {\n                this.goToMatch(record.MatchId);\n              } // clicking a row takes the user to a detailed view of the match in the /matches page using the MatchId parameter  \n\n            };\n          },\n          dataSource: this.state.matchesResults,\n          pagination: {\n            pageSizeOptions: [5, 10],\n            defaultPageSize: 5,\n            showQuickJumper: true\n          },\n          children: [/*#__PURE__*/_jsxDEV(ColumnGroup, {\n            title: \"Teams\",\n            children: /*#__PURE__*/_jsxDEV(Column, {\n              title: \"H\",\n              dataIndex: \"Home\",\n              sorter: (a, b) => a.Home.localeCompare(b.Home)\n            }, \"Home\", false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ColumnGroup, {\n            title: \"Goals\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default HomePage;","map":{"version":3,"sources":["D:/CIS550/2022Fall--CIS550--Team-38/client/src/pages/HomePage.js"],"names":["React","Table","Pagination","Select","MenuBar","searchArtist","searchTopSongs","Column","ColumnGroup","Option","playerColumns","title","dataIndex","key","sorter","a","b","Name","localeCompare","render","text","row","PlayerId","Nationality","Rating","HomePage","Component","constructor","props","state","matchesResults","matchesPageNumber","matchesPageSize","playersResults","pagination","leagueOnChange","bind","goToMatch","matchId","window","location","value","componentDidMount","then","res","setState","results","console","log","width","margin","marginTop","pageSizeOptions","defaultPageSize","showQuickJumper","record","rowIndex","onClick","event","MatchId","Home"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  Table,\n  Pagination,\n  Select\n} from 'antd'\n\nimport MenuBar from '../components/MenuBar';\nimport { searchArtist, searchTopSongs } from '../fetcher'\nconst { Column, ColumnGroup } = Table;\nconst { Option } = Select;\n\n\nconst playerColumns = [\n  {\n    title: 'Name',\n    dataIndex: 'Name',\n    key: 'Name',\n    sorter: (a, b) => a.Name.localeCompare(b.Name),\n    render: (text, row) => <a href={`/players?id=${row.PlayerId}`}>{text}</a>\n  },\n  {\n    title: 'Nationality',\n    dataIndex: 'Nationality',\n    key: 'Nationality',\n    sorter: (a, b) => a.Nationality.localeCompare(b.Nationality)\n  },\n  {\n    title: 'Rating',\n    dataIndex: 'Rating',\n    key: 'Rating',\n    sorter: (a, b) => a.Rating - b.Rating\n    \n  },\n  // TASK 7: add a column for Potential, with the ability to (numerically) sort ,\n  // TASK 8: add a column for Club, with the ability to (alphabetically) sort \n  // TASK 9: add a column for Value - no sorting required\n];\n\nclass HomePage extends React.Component {\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      matchesResults: [],\n      matchesPageNumber: 1,\n      matchesPageSize: 10,\n      playersResults: [],\n      pagination: null  \n    }\n\n    this.leagueOnChange = this.leagueOnChange.bind(this)\n    this.goToMatch = this.goToMatch.bind(this)\n  }\n\n\n  goToMatch(matchId) {\n    window.location = `/matches?id=${matchId}`\n  }\n\n  leagueOnChange(value) {\n    // TASK 2: this value should be used as a parameter to call getAllMatches in fetcher.js with the parameters page and pageSize set to null\n    // then, matchesResults in state should be set to the results returned - see a similar function call in componentDidMount()\n    \n  }\n\n  componentDidMount() {\n    searchArtist(null, null, null,null).then(res => {\n      this.setState({ matchesResults: res.results })\n    })\n    searchTopSongs(\"pop\").then(res => {\n      console.log(res.results)\n      // TASK 1: set the correct state attribute to res.results\n    })\n\n \n  }\n\n\n  render() {\n    return (\n      <div>\n        <MenuBar />\n        <div style={{ width: '70vw', margin: '0 auto', marginTop: '5vh' }}>\n          <h3>Artist</h3>\n          <Table dataSource={this.state.playersResults} columns={playerColumns} pagination={{ pageSizeOptions:[5, 10], defaultPageSize: 5, showQuickJumper:true }}/>\n        </div>\n        <div style={{ width: '70vw', margin: '0 auto', marginTop: '2vh' }}>\n          <h3>Awarded</h3>\n          <Select defaultValue=\"D1\" style={{ width: 120 }} onChange={this.leagueOnChange}>\n            <Option value=\"D1\">Bundesliga</Option>\n             {/* TASK 3: Take a look at Dataset Information.md from MS1 and add other options to the selector here  */}\n          </Select>\n          <Table onRow={(record, rowIndex) => {\n    return {\n      onClick: event => {this.goToMatch(record.MatchId)}, // clicking a row takes the user to a detailed view of the match in the /matches page using the MatchId parameter  \n    };\n  }} dataSource={this.state.matchesResults} pagination={{ pageSizeOptions:[5, 10], defaultPageSize: 5, showQuickJumper:true }}>\n            <ColumnGroup title=\"Teams\">\n              {/* TASK 4: correct the title for the 'Home' column and add a similar column for 'Away' team in this ColumnGroup */}\n              <Column title=\"H\" dataIndex=\"Home\" key=\"Home\" sorter= {(a, b) => a.Home.localeCompare(b.Home)}/>\n            </ColumnGroup>\n            <ColumnGroup title=\"Goals\">\n              {/* TASK 5: add columns for home and away goals in this ColumnGroup, with the ability to sort values in these columns numerically */}\n             \n            </ColumnGroup>\n             {/* TASK 6: create two columns (independent - not in a column group) for the date and time. Do not add a sorting functionality */}\n          </Table>\n        </div>\n      </div>\n    )\n  }\n\n}\n\nexport default HomePage\n\n"]},"metadata":{},"sourceType":"module"}